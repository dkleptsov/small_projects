import os
import sys
from aiogram import Bot, Dispatcher, executor, types
import time
from loguru import logger
from test_pattern import check_all_patterns
import gc

LOGS_PATH = r"/logs/inoagent_bot.log"
BOT_TOKEN = os.getenv("INOAGENT_BOT")
START_MSG = "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, \
–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–∑–Ω–∞–Ω—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏. üïµÔ∏è"
CONTACTS_MSG = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @real_den"
AWAIT_MSG = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. ü§ó"


@logger.catch
def main():
    logger.add(LOGS_PATH, format="{time} {level} {message}", retention="14 days"
               , serialize=True)
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot)

    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns_text = ('üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'ü§ì –ö–æ–Ω—Ç–∞–∫—Ç—ã')
    keyboard_markup.row(*(types.KeyboardButton(text) for text in btns_text))

    @dp.message_handler(commands=['start'])
    async def start_message(message: types.Message):
        await message.reply(START_MSG, reply_markup=keyboard_markup)

    @dp.message_handler()
    async def sum_message(message: types.Message):
        if message["text"] == 'üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç':
            await message.answer(START_MSG, reply_markup=keyboard_markup)
        elif message["text"] == 'ü§ì –ö–æ–Ω—Ç–∞–∫—Ç—ã':
            await message.answer(CONTACTS_MSG, reply_markup=keyboard_markup)
        else:
            await message.answer(AWAIT_MSG, reply_markup=keyboard_markup)

        start = time.time()
        results = check_all_patterns(message["text"])
        if len(results) > 0:
            for i in range(len(results)):
                await message.answer(
                    f"–ú—ã –Ω–∞—à–ª–∏ —Ç–µ–∫—Å—Ç: {results[i]['text_found']}\
                    \n–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–æ–∞–≥–µ–Ω—Ç–∞: {results[i]['name']}\
                    \n–¢–∏–ø –∏–Ω–æ–∞–≥–µ–Ω—Ç–∞: {results[i]['inoagent_type']}\
                    \n–ü—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –∏–Ω–æ–∞–≥–µ–Ω—Ç–∞: {results[i]['org_type']}\
                    \n–î–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä: {results[i]['date']}")
            await message.answer(
                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time.time() - start:.3f} —Å–µ–∫—É–Ω–¥")
        # Logging
        log_entry = f"\nMessage from: {message['from']['id']}\
                      \nText: {message['text']}\
                      \nNumber of detected inoagents: {len(results)}"
        logger.info(log_entry)
        await bot.send_message(91675683, log_entry)

        # Garbage collection
        gc.collect()

    logger.info("Inoagent bot started!")
    try:
        executor.start_polling(dp, skip_updates=False)
    except Exception as e:
        logger.error(e)
        time.sleep(15)
    return None


if __name__ == '__main__':
    main()
