#!/usr/bin/python3
import os
import gc
import sys
import time
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import BotCommand
from aiogram.types.message import ContentType
from loguru import logger
from check_inoagent import check_all_patterns
from monitoring.check_new_orgs import check_all_orgs
from monitoring.check_pc import health


if sys.platform == "win32":
    BOT_TOKEN = os.getenv("TESTFLIGHT_BOT")
    BASE_PATH = r"D:/repos/small_projects/inoagent_detection/"
    LOGS_PATH = BASE_PATH + r"logs/inoagent_bot.log"
    PATTERN_DB = BASE_PATH + r"patterns_db.csv"
    SUBS_DB = BASE_PATH + r"monitoring/subscribers.txt"
else:
    BOT_TOKEN = os.getenv("INOAGENT_BOT")
    LOGS_PATH = r"/home/small_projects/inoagent_detection/logs/inoagent_bot.log"
    PATTERN_DB =r"/home/small_projects/inoagent_detection/patterns_db.csv"
    SUBS_DB = r"/home/small_projects/inoagent_detection/monitoring/subscribers.txt"

ADMIN_NICK = "my_admin_1"
LOGGING_ID = 1631744908
START_MSG = f"üïµÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∞ –æ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ \
–∏–º–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–∑–Ω–∞–Ω—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –≤ –†–§.\n\n\
üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è - –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–µ–µ—Å—Ç—Ä–∞—Ö \
–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π:\n\n\
–ò–Ω–æ–∞–≥–µ–Ω—Ç–æ–≤ –°–ú–ò: https://minjust.gov.ru/ru/documents/7755/ \n\
–ò–Ω–æ–∞–≥–µ–Ω—Ç–æ–≤ –ù–ö–û: http://unro.minjust.ru/NKOForeignAgent.aspx\n\
–≠–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö: https://minjust.gov.ru/ru/documents/7822/\n\
–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö: http://www.fsb.ru/fsb/npd/terror.htm\n\
–ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö: https://minjust.gov.ru/ru/documents/7756/\n\n\
ü§ì –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @{ADMIN_NICK}"
AWAIT_MSG = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞. ü§ó"
NO_RES_MSG = f"–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π \
–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ ü§î. –ï—Å–ª–∏ –≤–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –º—ã —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏, \
–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º @{ADMIN_NICK}"
UNKN_CONTENT = "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–∞–º–∏. üòå"
SUBSCRIBE_MSG = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ \
–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ—Ç–æ–≤. ü§ó"
UNSUBSCRIBE_MSG = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ \
–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ—Ç–æ–≤. ü§ó"
SUBSCRIBED_MSG = "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ \
–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ—Ç–æ–≤. ü§ó"
NOT_SUBSCRIBED_MSG = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ \
–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ—Ç–æ–≤. ü§ó"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btns_text = ('üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è')
keyboard_markup.row(*(types.KeyboardButton(text) for text in btns_text))


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."),
        BotCommand(command="/help", description="–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç."),     
                ]
    await bot.set_my_commands(commands)


async def monitor():
    changes, downloads_status = check_all_orgs(rewrite=False)

    with open(SUBS_DB, "r", encoding="utf-8") as subs_file:
        subs_list = subs_file.readlines()
    
    if len(changes) > 0:
        for sub in subs_list:
            await bot.send_message(sub, changes, reply_markup=keyboard_markup,
            disable_web_page_preview=True)
    
    # Logging
    log_message = f"Success! Resources used: {health()}\
    \nDownload status: {downloads_status}"
    await bot.send_message(LOGGING_ID, log_message)
    logger.info(log_message)
    
    gc.collect()
    await asyncio.sleep(1200)


@logger.catch
def main():
    logger.add(LOGS_PATH, format="{time} {level} {message}", serialize=True)

    @dp.message_handler(commands=['start', 'help', 'settings'])
    async def start_message(message: types.Message):
        await message.answer(START_MSG, reply_markup=keyboard_markup,
        disable_web_page_preview=True)


    @dp.message_handler(commands=['reboot'])
    async def reboot_message(message: types.Message):
        await bot.send_message(LOGGING_ID, "Server will reboot!")
        os.system("reboot")


    @dp.message_handler(commands=['health'])
    async def health_message(message: types.Message):
        await bot.send_message(LOGGING_ID, health())


    @dp.message_handler(commands=['monitor'])
    async def monitor_message(message: types.Message):
        await bot.send_message(LOGGING_ID, "Monitoring launched!")
        logger.info("Monitoring launched!")
        while True:
            try:
                await monitor()
            except:
                log_message = f"FAILED! Resources used: {health()}"
                logger.info(log_message)
                await bot.send_message(LOGGING_ID, log_message)
                await asyncio.sleep(60)
                gc.collect()
        # else:
        #     await message.answer("Monitoring already active",
        #     reply_markup=keyboard_markup)


    @dp.message_handler(lambda message: message["text"] == 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
    async def subscribe_message(message: types.Message):
        with open(SUBS_DB, "r", encoding="utf-8") as subs_file:
            subs_list = subs_file.readlines()
        new_sub = str(message['from']['id']) + "\n"
        if new_sub in subs_list:
            await message.answer(SUBSCRIBED_MSG, reply_markup=keyboard_markup)
        else:
            subs_list.append(new_sub)
            with open(SUBS_DB, "a", encoding="utf-8") as subs_file:
                subs_file.write(new_sub)            
            await message.answer(SUBSCRIBE_MSG, reply_markup=keyboard_markup)
            
            # Logging
            log_message = f"New subscriber! \nid: {message['from']['id']}\
            \nnick: {message['from']['username']}\n Current list: {subs_list}"
            logger.info(log_message)
            await bot.send_message(LOGGING_ID, log_message)


    @dp.message_handler(lambda message: message["text"] == 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è')
    async def unsubscribe_message(message: types.Message):
        with open(SUBS_DB, "r", encoding="utf-8") as subs_file:
            subs_list = subs_file.readlines()
        new_sub = str(message['from']['id']) + "\n"
        if new_sub in subs_list:
            subs_list = set(subs_list)
            subs_list.remove(new_sub)
            with open(SUBS_DB, "w", encoding="utf-8") as subs_file:
                subs_file.writelines(subs_list)
            await message.answer(UNSUBSCRIBE_MSG, reply_markup=keyboard_markup)
            await bot.send_message(LOGGING_ID, 
            f"Subscriber removed! \nid: {message['from']['id']}\
            \nnick: {message['from']['username']}\
            \n Current list: {subs_list}")
        else:
            await message.answer(NOT_SUBSCRIBED_MSG, reply_markup=keyboard_markup)         


    @dp.message_handler(lambda message: message["text"] =="üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    async def how_it_works(message: types.Message):
        await message.answer(START_MSG, reply_markup=keyboard_markup, 
        disable_web_page_preview=True)


    @dp.message_handler()
    async def all_messages(message: types.Message):
        await set_commands(bot)
        await message.answer(AWAIT_MSG, reply_markup=keyboard_markup)
        start = time.time()
        results = check_all_patterns(message["text"], 
        patterns_db=PATTERN_DB)
        if len(results) > 0:
            for i in range(len(results)):
                await message.answer(
                f"–ú—ã –Ω–∞—à–ª–∏ —Ç–µ–∫—Å—Ç: {results[i]['text_found']}\
                \n–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–æ–∞–≥–µ–Ω—Ç–∞: {results[i]['name']}\
                \n–¢–∏–ø –∏–Ω–æ–∞–≥–µ–Ω—Ç–∞: {results[i]['inoagent_type']}\
                \n–ü—Ä–∞–≤–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –∏–Ω–æ–∞–≥–µ–Ω—Ç–∞: {results[i]['org_type']}\
                \n–î–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä: {results[i]['date']}\
                \n–ò—Å–∫–ª—é—á–µ–Ω –ª–∏ –∏–Ω–æ–∞–≥–µ–Ω—Ç –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {results[i]['excluded']}")
            await message.answer(
                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time.time() - start:.3f} —Å–µ–∫—É–Ω–¥")
        else:
            await message.answer(NO_RES_MSG + 
            f"\n–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {time.time() - start:.3f} —Å–µ–∫—É–Ω–¥")

        # Logging
        log_message = f"\nFrom id: {message['from']['id']}\
                      \nFrom nick: {message['from']['username']}\
                      \nText: {message['text']}\
                      \nNumber of detected inoagents: {len(results)}"
        logger.info(log_message)
        await bot.send_message(LOGGING_ID, log_message)

        # Garbage collection
        gc.collect()


    @dp.message_handler(content_types=ContentType.ANY)
    async def unknown_content(message: types.Message):
        await message.answer(UNKN_CONTENT)

    logger.info("Inoagent bot started!")
    try:
        executor.start_polling(dp, skip_updates=False)
    except Exception as e:
        logger.error(e)
        time.sleep(15)
    return None


if __name__ == '__main__':
    main()
